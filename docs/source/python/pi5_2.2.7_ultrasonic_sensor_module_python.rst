.. note::

    Hello, welcome to the SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts Community on Facebook! Dive deeper into Raspberry Pi, Arduino, and ESP32 with fellow enthusiasts.

    **Why Join?**

    - **Expert Support**: Solve post-sale issues and technical challenges with help from our community and team.
    - **Learn & Share**: Exchange tips and tutorials to enhance your skills.
    - **Exclusive Previews**: Get early access to new product announcements and sneak peeks.
    - **Special Discounts**: Enjoy exclusive discounts on our newest products.
    - **Festive Promotions and Giveaways**: Take part in giveaways and holiday promotions.

    ðŸ‘‰ Ready to explore and create with us? Click [|link_sf_facebook|] and join today!

.. _2.2.7_py:

2.2.7 Ultrasonic Sensor Module
==============================

**Introduction**

The ultrasonic sensor module uses ultrasonic waves to measure distances with remarkable accuracy. It emits ultrasonic waves and listens for their echo, calculating the distance based on the time taken for the echo to return. This versatile technology is commonly used in robotics, obstacle detection, and range-finding applications.


----------------------------------------------


**What Youâ€™ll Need**

Here are the components required for this project:

.. list-table::
    :widths: 30 20
    :header-rows: 1

    * - COMPONENT INTRODUCTION
      - PURCHASE LINK
    * - GPIO Extension Board
      - |link_gpio_board_buy|
    * - Breadboard
      - |link_breadboard_buy|
    * - Wires
      - |link_wires_buy|
    * - Ultrasonic Sensor Module
      - |link_ultrasonic_buy|


----------------------------------------------


**Circuit Diagram**

Below is the schematic diagram for the ultrasonic sensor module:

.. image:: ../python/img/2.2.8_ultrasonic_schematic.png



----------------------------------------------

**Wiring Diagram**

Assemble the circuit as shown in the diagram below:

.. image:: ../python/img/2.2.8_ultrasonic_circuit.png

Ensure the connections are secure, with the Echo pin connected to GPIO 24 and the Trigger pin to GPIO 23 of the Raspberry Pi.


----------------------------------------------


**Writing the Code**

1. Navigate to the project directory:

   .. code-block:: bash

       cd ~/zero-w-ai-kit/python

2. Run the Python script:

   .. code-block:: bash

       sudo python3 2.2.8_Ultrasonic_zero.py

Once the script is running: The ultrasonic sensor detects the distance to the nearest obstacle and prints the measured distance on the screen in centimeters.

.. warning::
    If you encounter the error ``RuntimeError: Cannot determine SOC peripheral base address``, refer to the :ref:`faq_soc` for troubleshooting steps.


----------------------------------------------


**Code**

Below is the Python code for this project:

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import DistanceSensor
   from time import sleep

   # Initialize the DistanceSensor using GPIO Zero library
   # Trigger pin is connected to GPIO 23, Echo pin to GPIO 24
   sensor = DistanceSensor(echo=24, trigger=23)

   try:
       # Main loop to continuously measure and report distance
       while True:
           dis = sensor.distance * 100  # Measure distance and convert from meters to centimeters
           print('Distance: {:.2f} cm'.format(dis))  # Print the distance with two decimal precision
           sleep(0.3)  # Wait for 0.3 seconds before the next measurement

   except KeyboardInterrupt:
       # Handle KeyboardInterrupt (Ctrl+C) to gracefully exit the loop
       pass


This Python script uses an ultrasonic distance sensor to measure the distance to an object and displays the result on the console. When executed:

1. The sensor, connected to GPIO pins 23 (trigger) and 24 (echo), continuously measures the distance to the nearest object.
2. The distance is calculated in meters and converted to centimeters, then displayed in the format: ``Distance: <value> cm`` with two decimal places of precision.
3. The distance is updated every 0.3 seconds, allowing for near real-time monitoring.
4. The program runs indefinitely until interrupted with ``Ctrl+C``, at which point it exits gracefully.


----------------------------------------------


**Understanding the Code**

1. **Imports:**

   The script imports the ``DistanceSensor`` class from the ``gpiozero`` library to interact with the ultrasonic sensor and the ``sleep`` function from the ``time`` module to introduce delays.

   .. code-block:: python

       from gpiozero import DistanceSensor
       from time import sleep

2. **Initialization:**

   The ultrasonic sensor is initialized with the Echo pin connected to GPIO 24 and the Trigger pin to GPIO 23. This setup enables the Raspberry Pi to send and receive ultrasonic signals.

   .. code-block:: python

       sensor = DistanceSensor(echo=24, trigger=23)

3. **Main Loop:**

   * Continuously measures the distance to the nearest object.
   * Converts the distance from meters to centimeters.
   * Prints the distance with two decimal places of precision.
   * Includes a 0.3-second delay to allow the sensor to stabilize between measurements.

   .. code-block:: python

       while True:
           dis = sensor.distance * 100  # Convert distance to centimeters
           print('Distance: {:.2f} cm'.format(dis))
           sleep(0.3)

4. **Graceful Exit:**

   The ``try-except`` block ensures the program exits cleanly when interrupted with ``Ctrl+C``.

   .. code-block:: python

       except KeyboardInterrupt:
           pass


----------------------------------------------


**Troubleshooting**

1. **No Distance Output**:

   - **Cause**: The sensor is not properly connected or powered.
   - **Solution**:

      - Ensure the trigger pin is connected to GPIO 23 and the echo pin to GPIO 24.
      - Verify that the sensor has a stable power supply (usually 5V or 3.3V depending on the model).

2. **Constant or Incorrect Distance Values**:

   - **Cause**: Obstacles are too close or too far from the sensor, or there is interference.
   - **Solution**:

      - Ensure the object is within the sensor's effective range (typically 2 cm to 400 cm).
      - Check for interference from other ultrasonic devices or reflective surfaces.

3. **Distance Always Zero**:

   - **Cause**: Faulty sensor or incorrect wiring.
   - **Solution**: Test the sensor on another GPIO setup or replace it if faulty. Double-check the wiring configuration.



----------------------------------------------

**Extendable Ideas**

1. **Threshold-Based Alerts**: Trigger an alert when the measured distance is below a specific threshold:

  .. code-block:: python

      if dis < 10:
          print("Warning: Object too close!")

2. **Auditory Feedback**: Add a buzzer that sounds when the distance is below a threshold:

  .. code-block:: python

      from gpiozero import Buzzer
      buzzer = Buzzer(27)
      if dis < 10:
          buzzer.on()
      else:
          buzzer.off()

3. **LED Indicators**: Use LEDs to indicate distance ranges:

  .. code-block:: python

      from gpiozero import LED
      green_led = LED(17)
      red_led = LED(18)
      if dis < 10:
          red_led.on()
          green_led.off()
      else:
          green_led.on()
          red_led.off()

----------------------------------------------


**Conclusion**

This project demonstrates how to use an ultrasonic sensor module to measure distances with a Raspberry Pi. By understanding the principles of ultrasonic wave detection and GPIO programming, you can integrate such sensors into a variety of applications, from robotics to home automation. With this foundation, you can explore more advanced projects involving sensors and real-world interaction.
