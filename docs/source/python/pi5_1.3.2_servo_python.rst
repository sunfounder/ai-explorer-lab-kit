.. note::

    Hello, welcome to the SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts Community on Facebook! Dive deeper into Raspberry Pi, Arduino, and ESP32 with fellow enthusiasts.

    **Why Join?**

    - **Expert Support**: Solve post-sale issues and technical challenges with help from our community and team.
    - **Learn & Share**: Exchange tips and tutorials to enhance your skills.
    - **Exclusive Previews**: Get early access to new product announcements and sneak peeks.
    - **Special Discounts**: Enjoy exclusive discounts on our newest products.
    - **Festive Promotions and Giveaways**: Take part in giveaways and holiday promotions.

    ðŸ‘‰ Ready to explore and create with us? Click [|link_sf_facebook|] and join today!

.. _1.3.2_py:

1.3.2 Servo
==============================

**Introduction**

In this project, we will learn how to control a servo motor using a Raspberry Pi. Servo motors are commonly used in robotics and automation for precise control of angular motion.

----------------------------------------------

**What Youâ€™ll Need**

To complete this project, you will need the following components:

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - COMPONENT
        - PURCHASE LINK

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_servo`
        - |link_servo_buy|

----------------------------------------------

**Circuit Diagram**

The circuit diagram below shows the connections required for controlling the servo motor.

.. image:: ../img/image337.png

----------------------------------------------

**Wiring Diagram**

Follow these steps to build the circuit:

1. Connect the servo signal pin to GPIO pin 18 on the Raspberry Pi.
2. Connect the servo power pin to the 5V pin on the Raspberry Pi.
3. Connect the ground pin of the servo to the GND pin on the Raspberry Pi.

.. image:: ../img/image125.png

----------------------------------------------

**Writing the Code**

The following Python code demonstrates how to control the servo motor by moving it between various angles:

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import Servo
   from time import sleep

   # Set the GPIO pin number where the servo motor is connected
   myGPIO = 17

   # Define a correction factor to fine-tune servo pulse width
   myCorrection = 0.45
   maxPW = (2.0 + myCorrection) / 1000  # Calculate maximum pulse width
   minPW = (1.0 - myCorrection) / 1000  # Calculate minimum pulse width

   # Initialize the Servo object with custom pulse widths
   servo = Servo(myGPIO, min_pulse_width=minPW, max_pulse_width=maxPW)

   try:
       while True:
           # Position the servo at the middle and wait
           servo.mid()
           print("mid")  # Indicate current position
           sleep(0.5)    # Brief pause for 0.5 seconds

           # Move the servo to its minimum position and wait
           servo.min()
           print("min")  # Indicate current position
           sleep(1)      # Hold position for 1 second

           # Return the servo to the middle position and wait
           servo.mid()
           print("mid")  # Indicate current position
           sleep(0.5)    # Brief pause for 0.5 seconds

           # Move the servo to its maximum position and wait
           servo.max()
           print("max")  # Indicate current position
           sleep(1)      # Hold position for 1 second

   except KeyboardInterrupt:
       # Gracefully terminate the script on a keyboard interrupt (Ctrl+C)
       pass


This Python script controls a servo motor connected to GPIO pin 17 on a Raspberry Pi. When executed:

1. The servo moves through three positions in a continuous loop:

   - **Middle** (``servo.mid()``): Positions the servo at its neutral (centered) position and pauses for 0.5 seconds.
   - **Minimum** (``servo.min()``): Moves the servo to its minimum position (fully counterclockwise) and pauses for 1 second.
   - **Maximum** (``servo.max()``): Moves the servo to its maximum position (fully clockwise) and pauses for 1 second.

2. Each position is printed to the console as the servo moves.

3. The program runs indefinitely until interrupted by pressing ``Ctrl+C``.


----------------------------------------------

**Understanding the Code**

1. **Library Import**

   The ``gpiozero`` library simplifies GPIO interactions, while the ``time`` library provides delay functions.

   .. code-block:: python

       from gpiozero import Servo
       from time import sleep

2. **Servo Initialization**

   The ``Servo`` object is initialized with GPIO pin 17 and custom pulse width settings to fine-tune the servo movement.

   .. code-block:: python

       servo = Servo(myGPIO, min_pulse_width=minPW, max_pulse_width=maxPW)

3. **Servo Movement**

   The servo is moved to different positions (``mid``, ``min``, ``max``) in a continuous loop, with each position printed to the console and held for a specific duration.

   .. code-block:: python

       while True:
           servo.mid()
           print("mid")
           sleep(0.5)
           servo.min()
           print("min")
           sleep(1)
           servo.mid()
           print("mid")
           sleep(0.5)
           servo.max()
           print("max")
           sleep(1)

4. **Interrupt Handling**

   The ``try-except`` block ensures the program stops gracefully when interrupted using Ctrl+C.

   .. code-block:: python

       except KeyboardInterrupt:
           pass



----------------------------------------------

**Troubleshooting**

1. **Servo Does Not Move**  

   - **Cause**: Incorrect GPIO pin connection or power supply issues.  
   - **Solution**: Ensure the servo is connected to GPIO pin 17, with a stable 5V power source and a ground connection.

2. **Servo Vibrates or Makes Noise**  

   - **Cause**: Incorrect pulse width or signal interference.  
   - **Solution**: Adjust the ``myCorrection`` factor to fine-tune the ``min_pulse_width`` and ``max_pulse_width`` values.



3. **Script Fails to Exit Gracefully** 

   - **Cause**: The ``try...except`` block may not properly handle interruptions.  
   - **Solution**: Ensure the ``pass`` statement in the ``except KeyboardInterrupt`` block is implemented to terminate the program cleanly.

4. **Servo Movement is Erratic or Unresponsive**  

   - **Cause**: Insufficient power supply to the servo.  
   - **Solution**: Use an external power source for the servo if the Raspberry Pi's 5V pin cannot provide sufficient current.


----------------------------------------------


**Extendable Ideas**

1. **Smooth Motion Control**  

   Implement gradual movements by incrementally changing the servo position using ``servo.value``:

   .. code-block:: python

      for position in [-1, -0.5, 0, 0.5, 1]:
         servo.value = position
         sleep(0.5)


2. **User-Controlled Servo**  

   Allow users to control the servo position interactively through keyboard input:

   .. code-block:: python

      while True:
         position = float(input("Enter position (-1 to 1): "))
         servo.value = position

3. **Servo Sweep**  

   Create a sweeping motion where the servo oscillates smoothly between its minimum and maximum positions:

   .. code-block:: python
         
      for position in range(-10, 11):
         servo.value = position / 10.0
         sleep(0.1)


----------------------------------------------


**Conclusion**

This project demonstrates how to control a servo motor using a Raspberry Pi and the GPIO Zero library. Understanding servo control opens the door to building robots, mechanical arms, and other motion-based projects.
