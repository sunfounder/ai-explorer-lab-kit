.. note::

    Hello, welcome to the SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts Community on Facebook! Dive deeper into Raspberry Pi, Arduino, and ESP32 with fellow enthusiasts.

    **Why Join?**

    - **Expert Support**: Solve post-sale issues and technical challenges with help from our community and team.
    - **Learn & Share**: Exchange tips and tutorials to enhance your skills.
    - **Exclusive Previews**: Get early access to new product announcements and sneak peeks.
    - **Special Discounts**: Enjoy exclusive discounts on our newest products.
    - **Festive Promotions and Giveaways**: Take part in giveaways and holiday promotions.

    ðŸ‘‰ Ready to explore and create with us? Click [|link_sf_facebook|] and join today!

.. _1.1.7_py:

1.1.7 I2C LCD1602
======================

**Introduction**

The LCD1602 is a 16x2 character-type liquid crystal display capable of displaying up to 32 characters at a time. It uses the I2C communication protocol, reducing the number of GPIO pins required for control. This project demonstrates how to interface with the LCD1602 to display text messages.

----------------------------------------------

**What Youâ€™ll Need**

To complete this project, you will need the following components:

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - COMPONENT
        - PURCHASE LINK


    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_i2c_lcd`
        - |link_i2clcd1602_buy|
    *   - Fusion HAT
        - 
    *   - Raspberry Pi Zero 2 W
        -



**Circuit Diagram**

The circuit diagram below shows how to connect the LCD1602 to the Raspberry Pi using the I2C interface.

.. image:: ../python/img/

**Wiring Diagram**

Follow these steps to build the circuit:

1. Connect the I2C interface pins (SDA and SCL) of the LCD1602 to the corresponding pins on the Fusiuon HAT.
2. Ensure proper power supply connections to the LCD1602.
3. Verify the wiring to avoid errors.

.. image:: ../python/img/

**Writing the Code**

The following Python code initializes the LCD1602 and displays a simple greeting message:

.. code-block:: python

   from fusion_hat import LCD1602
   from time import sleep

   lcd = LCD1602(address=0x27, backlight=1)

   while True:
      lcd.clear()
      lcd.write(0, 0, 'Greetings!')
      lcd.write(1, 1, 'From SunFounder')
      sleep(1)
      lcd.clear()
      lcd.message('Hello\n   World!')
      sleep(1)

This Python script interfaces with an LCD1602 display module to present a brief message. When executed:

1. It initializes the LCD1602 display with I2C communication (default address ``0x27``).
2. The first line of the display shows the text "Greetings!".
3. The second line displays the text "From SunFounder".
4. The messages remain visible for 1 seconds before the next text.

The display clears if the user interrupts the script by pressing ``Ctrl+C``.




**Understanding the Code**

1. **Library Import**

   The ``LCD1602`` class simplifies interfacing with the I2C LCD1602 display. It provides functions for initialization and displaying text.

   .. code-block:: python

      from fusion_hat import LCD1602

2. **Initialization**

   Initializes the LCD with the I2C address (typically 0x27). The backlight is enabled during initialization.

   .. code-block:: python

      lcd = LCD1602(address=0x27, backlight=1)

3. **Displaying Text**

   .. code-block:: python

      lcd.clear()
      lcd.write(0, 0, 'Greetings!')
      lcd.write(1, 1, 'From SunFounder')
      sleep(1)
      lcd.clear()
      lcd.message('Hello\n   World!')
      sleep(1)

   * The ``write`` function is used to display text on the LCD. The first two parameters specify the row and column positions, and the third parameter is the text message.
   * The ``message`` function displays a multi-line message on the LCD. The text is automatically split into two lines.
   * The ``clear`` function clears the display.


**Troubleshooting**

1. **No Text on the LCD Display**  

   - **Cause**: Incorrect I2C address or improper wiring.  
   - **Solution**: Verify the I2C address of the LCD module (use ``i2cdetect -y 1`` on the Raspberry Pi). Ensure the SDA and SCL pins are correctly connected.

2. **Backlight Not Working**  

   - **Cause**: Incorrect backlight setting or wiring issue.  
   - **Solution**: Check the backlight connection and ensure the ``backlight`` parameter is set correctly during initialization.

3. **Text Alignment Issues**  

   - **Cause**: Incorrect column and row positions in the ``write()`` function.  
   - **Solution**: Adjust the ``write(row, column, text)`` parameters to align the text properly.



**Extendable Ideas**

1. **Custom Messages**  

   Allow the user to input custom messages via the terminal to be displayed on the LCD:

   .. code-block:: python

      user_message1 = input("Enter first line: ")
      user_message2 = input("Enter second line: ")
      lcd.write(0, 0, user_message1)
      lcd.write(1, 0, user_message2)


2. **Real-Time Clock Display**  

   Show the current date and time dynamically:


   .. code-block:: python

      import datetime
      while True:
         now = datetime.datetime.now()
         lcd.write(0, 0, now.strftime("%H:%M:%S"))
         lcd.write(1, 0, now.strftime("%d-%m-%Y"))
         time.sleep(1)


3. **Interactive Display**  

   Use buttons or sensors to cycle through pre-defined messages or interact with the display content.

4. **Scrolling Text**  

   Implement a scrolling text feature for messages longer than the display width:

   .. code-block:: python

      def scroll_text(row, message, delay=0.3):
         for i in range(len(message) - 16 + 1):
            lcd.write(row, 0, message[i:i+16])
            time.sleep(delay)


5. **Dynamic Backlight Control**  

   Add functionality to turn the backlight on or off based on user input or a light sensor.

6. **Animated Effects**  

   Create simple animations, such as blinking text or alternating messages, for more engaging output.



**Conclusion**

This project demonstrates how to use the LCD1602 with the I2C interface to display static text. By understanding the basics of I2C communication and the functions of the ``LCD1602`` class, you can integrate the display into more complex applications.