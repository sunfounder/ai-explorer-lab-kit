.. note::

    Hello, welcome to the SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts Community on Facebook! Dive deeper into Raspberry Pi, Arduino, and ESP32 with fellow enthusiasts.

    **Why Join?**

    - **Expert Support**: Solve post-sale issues and technical challenges with help from our community and team.
    - **Learn & Share**: Exchange tips and tutorials to enhance your skills.
    - **Exclusive Previews**: Get early access to new product announcements and sneak peeks.
    - **Special Discounts**: Enjoy exclusive discounts on our newest products.
    - **Festive Promotions and Giveaways**: Take part in giveaways and holiday promotions.

    ðŸ‘‰ Ready to explore and create with us? Click [|link_sf_facebook|] and join today!

.. _1.1.6_py:

1.1.6 LED Dot Matrix
=====================

**Introduction**

An LED dot matrix is a grid of LEDs that can light up to display characters, symbols, or animations. This project demonstrates how to control an LED dot matrix to display static shapes.

----------------------------------------------

**What Youâ€™ll Need**

To complete this project, you will need the following components:

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - COMPONENT
        - PURCHASE LINK

    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_dot_matrix`
        - |link_led_matrix_buy|
    *   - Fusion HAT
        - 
    *   - Raspberry Pi Zero 2 W
        -


----------------------------------------------

**Circuit Diagram**

The circuit connects the LED dot matrix to the Raspberry Pi using SPI communication. The schematic below provides a clear view of the wiring.

.. image:: ../img/schematic_dot.png

----------------------------------------------

**Wiring Diagram**

Follow these steps to build the circuit:

1. Connect the SPI interface pins (MOSI, SCK, and CS) to the Fusion HAT pins.
2. Ensure proper power supply connections to the matrix.

.. image:: ../img/1.1.6fritzing.png

----------------------------------------------

**Writing the Code**




.. code-block:: python

    from fusion_hat import LedMatrix

    rgb_matrix = LedMatrix(rotate=0)

    #Define a simple pattern (e.g., a smiley face)

    # pattern = [
    #     0b00111100,
    #     0b01000010,
    #     0b10100101,
    #     0b10000001,
    #     0b10100101,
    #     0b10011001,
    #     0b01000010,
    #     0b00111100
    # ]

    pattern = [
        0b01111110,
        0b01000000,
        0b00111100,
        0b00000010,
        0b00000001,
        0b00000001,
        0b01000010,
        0b00111100
    ]

    rgb_matrix.display_pattern(pattern) 

    # To keep the display on, prevent the script from exiting (e.g., with a loop)
    input("Press Enter to exit...")

This script demonstrates how to control an LED matrix using the Fusion Hat library. It initializes the LED matrix and displays a predefined pattern.

Run the script on a compatible device with an attached LED matrix. The matrix will display a defined pattern until the user manually exits the script.


----------------------------------------------


**Understanding the Code**


1. **Importing Dependencies**
   
   .. code:: python

      from fusion_hat import LedMatrix
   
   The required module ``LedMatrix`` from the ``fusion_hat`` library is imported to control the LED matrix.

2. **Initializing the LED Matrix**
   
   .. code:: python

      rgb_matrix = LedMatrix(rotate=0)
   
   The LED matrix is initialized with a rotation setting of ``0``. This parameter can be adjusted to rotate the display if necessary.

3. **Defining a Display Pattern**
   
   .. code:: python

      pattern = [
          0b01111110,
          0b01000000,
          0b00111100,
          0b00000010,
          0b00000001,
          0b00000001,
          0b01000010,
          0b00111100
      ]
   
   The pattern is defined as a list of 8-bit binary values, where each bit represents an LED state (1 for ON, 0 for OFF). The chosen pattern forms a specific shape when displayed on an 8x8 LED matrix.

4. **Displaying the Pattern**
   
   .. code:: python

      rgb_matrix.display_pattern(pattern)
   
   The pattern is sent to the LED matrix for display.

5. **Keeping the Display Active**
   
   .. code:: python

      input("Press Enter to exit...")
   
   The script waits for user input before terminating, ensuring that the pattern remains visible until the user decides to exit.




----------------------------------------------


**Troubleshooting**

1. **No Output on the LED Matrix**  

   - **Cause**: Incorrect SPI connection or initialization issues.  
   - **Solution**: Verify the SPI connections between the Raspberry Pi and the LED matrix. Ensure the correct ``port`` and ``device`` values are passed to the ``spi()`` function.

2. **Text or Shapes Appear Distorted**  

   - **Cause**: Incorrect rotation or device dimensions.  
   - **Solution**: Adjust the ``rotate`` parameter in the ``max7219()`` initialization to match the physical orientation of the LED matrix.


----------------------------------------------

**Extendable Ideas**

1. **Dynamic Pattern Animation**  

   - Implement multiple patterns and cycle through them using a loop.  
   - Introduce smooth transitions between patterns to create animations.  

2. **User-Defined Patterns**  

   - Allow users to input custom patterns via a configuration file or user interface.  
   - Use a simple text-based representation to define new designs easily.  

3. **Real-Time Interaction**  

   - Implement button controls to switch between different patterns.  
   - Integrate a joystick or touch interface to manipulate the LED matrix dynamically.  

4. **Scrolling Text Display**  

   - Develop a function to scroll messages across the LED matrix.  
   - Allow users to input text dynamically and display it character by character.  


----------------------------------------------


**Conclusion**


This script provides a simple example of displaying patterns on an LED matrix using the Fusion Hat library. Users can modify the pattern to create different visual designs.

